#include <iostream>

using namespace std;

typedef int dados;

class noh {
	friend class lista;
	private:
		dados dado;	
		noh* proximo;
		noh* anterior;
	public:
		noh(dados d = 0);
};

noh::noh(dados d){
	dado = d;
	proximo = NULL;
	anterior = NULL;
}

class lista{
	private:
		noh* primeiro;
		noh* ultimo;
		int _tamanho;
		void imprimeReversoAux(noh* atual);
		
	public:
		lista();
		lista (const lista& copiaLista);
		lista& operator=(const lista &outraLista);
		lista (dados vetor, dados tam);
		void insereInicio(dados dado);
		void insereFim(dados dado);
		void inserePosicao(dados posicao, dados dado);
		void imprime();
		void remove(dados posicao);
		void procura(dados valor);
		void imprimeReverso();
		void troca(dados pos1, dados pos2);
		void removeTodos();
		 
};

lista::lista(){
	primeiro = NULL;
	ultimo = NULL;
	_tamanho = 0;
}
lista::lista(dados vetor[], dados tam){
	primeiro = NULL;
	ultimo = NULL;
	_tamanho = tam;
	
	for (int i = 0; i < _tamanho; i++){
		insereFim(vetor[i]);
	}
	
}
lista::lista(const lista& copiaLista){
	primeiro = NULL;
	ultimo = NULL;
	_tamanho = 0;
	
	noh* aux = copiaLista.primeiro;
	
	while(aux != NULL){
		insereFim(aux->dado);
		aux = aux->proximo;
	}
}

lista& lista::operator=(const lista &outraLista){
	removeTodos();
	dados posAux = 0;
	noh* aux = outraLista.primeiro;
	
	while(posAux < outraLista._tamanho){
		insereFim(aux->dado);
		aux = aux->proximo;
		posAux++;
	}
	
	return *this;
}

void lista::removeTodos(){
	dados posAux = 0;
	
	while(posAux < _tamanho){
		remove(posAux);
	}
	
}

void lista::insereInicio(dados dado){
	noh* novo = new noh(dado);
	
	if(primeiro == NULL){
		primeiro = novo;
		ultimo = novo;
	}
	else{
		primeiro->anterior = novo;
		novo->proximo = primeiro;
		primeiro = novo;
	}
	_tamanho++;
}
void lista::insereFim(dados dado){
	noh* novo = new noh(dado);
	
	if(primeiro == NULL){
		primeiro = novo;
		ultimo = novo;
	}
	else{
		novo->anterior = ultimo;
		ultimo->proximo = novo;
		ultimo = novo;
	}
	_tamanho++;
}
void lista::inserePosicao(dados posicao, dados dado){
	noh* novo = new noh(dado);
	
	if(primeiro == NULL){
		primeiro = novo;
		ultimo = novo;
	}
	else if(posicao == 0 ){
		primeiro->anterior = novo;
		novo->proximo = primeiro;
		primeiro = novo;
	}
	
	else if(posicao == _tamanho){
		novo->anterior = ultimo;
		ultimo->proximo = novo;
		ultimo = novo;
	}
	else{
		noh* aux = primeiro;
		int posAux = 0;
		
		while(posAux < posicao-1){
			aux = aux->proximo;
			posAux++;
		}
		novo->anterior = aux;
		novo->proximo = aux->proximo;
		aux->proximo = novo;
	}
	_tamanho++;
}

void lista::imprime(){
	noh* aux = primeiro;
	while(aux != NULL){
		cout << aux->dado;
		aux = aux->proximo;
	}
}

void lista::imprimeReverso(){
	imprimeReversoAux(primeiro);
}

void lista::imprimeReversoAux(noh* atual){
	if(atual == NULL){
		return;
	}
	else{
		imprimeReversoAux(atual->proximo);
		cout << atual->dado << " ";
	}
}

void lista::troca(dados pos1, dados pos2){
	noh* auxPrimeiro;
	noh* auxProxPrimeiro;
	noh* auxUltimo;
	noh* auxPenUltimo;
	
	dados posAux = 0;
		
		if((pos1 == 0) and (pos2 == _tamanho-1)){
			auxPrimeiro = primeiro;
			auxProxPrimeiro = primeiro->proximo;
			auxUltimo = ultimo;
			auxPenUltimo = ultimo->anterior;
			auxPrimeiro->proximo = NULL;
			auxPrimeiro->anterior = auxPenUltimo;
			auxPrimeiro->anterior->proximo = auxPrimeiro;
			auxUltimo->proximo = auxProxPrimeiro;
			auxUltimo->anterior = NULL;
			auxUltimo->proximo->anterior = auxUltimo;
			ultimo = auxPrimeiro;
			primeiro = auxUltimo;
		}
		else if(pos1 == pos2-1 and pos2 == pos1+1){
		auxPrimeiro = primeiro;
		auxUltimo = primeiro;
			if(pos1 == 0){
				while(posAux != pos2){
					auxUltimo = auxUltimo->proximo;
					posAux++;
				}
				auxPrimeiro->proximo = auxUltimo->proximo;
				auxPrimeiro->anterior = auxUltimo;
				auxUltimo->anterior = NULL;
				auxUltimo->proximo = auxPrimeiro;
				auxPrimeiro->proximo->anterior = auxPrimeiro;
				
				primeiro = auxUltimo;
				
			}
			
			else if(pos2 == _tamanho-1){
				while(posAux != pos1){
					auxPrimeiro = auxPrimeiro->proximo;
					posAux++;
				}
				auxUltimo = ultimo;
				auxUltimo->proximo = auxPrimeiro;
				auxPrimeiro->proximo = NULL;
				auxUltimo->anterior = auxPrimeiro->anterior;
				auxPrimeiro->anterior = auxUltimo;
				auxUltimo->anterior->proximo = auxUltimo;
				  
					
				ultimo = auxPrimeiro;
				
			}
			else{
				while(posAux != pos1){
					auxPrimeiro = auxPrimeiro->proximo;
					posAux++;
				}
				posAux = 0;
				while(posAux != pos2){
					auxUltimo = auxUltimo->proximo;
					posAux++;
				}
				auxPrimeiro->proximo = auxUltimo->proximo;
				auxPrimeiro->proximo->anterior = auxPrimeiro;
				auxUltimo->anterior = auxPrimeiro->anterior;
				auxUltimo->anterior->proximo = auxUltimo;
				auxUltimo->proximo = auxPrimeiro;
				auxPrimeiro->anterior = auxUltimo;
			}
			
		}
		else{
			auxPrimeiro = primeiro;
			auxUltimo = primeiro;
			if(pos1 == 0){
				while(posAux != pos2){
					auxUltimo = auxUltimo->proximo;
					posAux++;
				}
				auxProxPrimeiro = auxPrimeiro->proximo;
				auxPrimeiro->proximo = auxUltimo->proximo;
				auxPrimeiro->proximo->anterior = auxPrimeiro;
				auxPrimeiro->anterior = auxUltimo->anterior;
				auxPrimeiro->anterior->proximo = auxPrimeiro;
				auxUltimo->anterior = NULL;
				auxUltimo->proximo = auxProxPrimeiro;
				auxUltimo->proximo->anterior = auxUltimo;
				
				primeiro = auxUltimo;
				
			}
			else if(pos2 == _tamanho-1){
				while(posAux != pos1){
					auxPrimeiro = auxPrimeiro->proximo;
					posAux++;
				}
				auxUltimo = ultimo;
				auxProxPrimeiro = auxPrimeiro->anterior;
				auxUltimo->proximo = auxPrimeiro->proximo;
				auxPrimeiro->proximo = NULL;
				auxUltimo->proximo->anterior = auxUltimo;
				auxPrimeiro->anterior = auxUltimo->anterior;
				auxPrimeiro->anterior->proximo = auxPrimeiro;
				auxUltimo->anterior = auxProxPrimeiro;
				auxUltimo->anterior->proximo = auxUltimo;
				
				
				ultimo = auxPrimeiro;
		
			}
			else{
				while(posAux != pos1){
					auxPrimeiro = auxPrimeiro->proximo;
					posAux++;
				}
				posAux = 0;
				while(posAux != pos2){
					auxUltimo = auxUltimo->proximo;
					posAux++;
				}
				
				auxProxPrimeiro = auxPrimeiro->proximo;
				auxPenUltimo = auxUltimo->anterior;
				auxPrimeiro->proximo = auxUltimo->proximo;
				auxPrimeiro->proximo->anterior = auxPrimeiro;
				auxUltimo->proximo = auxProxPrimeiro;
				auxUltimo->proximo->anterior = auxUltimo;
				auxUltimo->anterior = auxPrimeiro->anterior;
				auxUltimo->anterior->proximo = auxUltimo;
				auxPrimeiro->anterior = auxPenUltimo;
				auxPrimeiro->anterior->proximo = auxPrimeiro;
				
			}
		
		}
}


void lista::remove(dados posicao){
	noh* aux = primeiro;

	if(posicao == 0){
		primeiro = aux->proximo;
		delete aux;
	}
	else {
		dados posAux = 1;
		noh* ant = primeiro;
		while(posAux < posicao+1){
			ant = aux;
			aux = aux->proximo;
			posAux++;
		}
		if(aux == ultimo){
			ant->proximo = NULL;
			ultimo = ant;
			delete aux;
		}
		else{
			ant->proximo = aux->proximo;
			delete aux;
		}
	}
	_tamanho--;
}

void lista::procura(dados valor){
	noh* aux = primeiro;
	dados posAux = 0;
	while(aux->dado != valor){
		aux = aux->proximo;
		posAux++;
	}
	cout << posAux;
}

int main(){
	int num, dado, pos, pos2, vetor[5];
	lista novaLista;
	lista Lista2;
	
	cin >> num;
	
	for (int i = 0; i < num; i++){
		cin >> dado;
		novaLista.insereFim(dado);
	}
	
	lista listaCopiada(novaLista);
	
	//novaLista.imprime();
	
	cout << endl;
	
	//cin >> pos;
	//cin >> dado;
	
	//novaLista.inserePosicao(pos, dado);
	
	//novaLista.imprime();
	
	//cout << endl;
	
	//cin >> pos;
	
	//novaLista.remove(pos);
	
	//novaLista.imprime();
	
	//cout << endl;
	
	//cin >> dado;
	
	//novaLista.procura(dado);
	
	//cout << endl;
	
	//novaLista.imprimeReverso();
	
	//cout << endl;
	
	//listaCopiada.imprime();
	
	//novaLista.troca();
	
	//cout << endl;
	
	//novaLista.imprime();
	
	//cin >> pos >> pos2;
	
	//novaLista.troca(pos, pos2);
	
	//cout << endl;
	
	//novaLista.imprime();
	
	//cout << endl;
	
	Lista2 = novaLista;
	novaLista.imprime();
	Lista2.imprime();
	
}
